name: Deploy to Linux Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install ruff

    - name: Run code quality checks
      run: |
        cd fenix-eagle && ruff check .
        cd ../fenix-gateway && ruff check .

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Check OS and install git if not present
          if ! command -v git &> /dev/null; then
            echo "Git not found, attempting to install..."
            if command -v apt-get &> /dev/null; then
              apt-get update && apt-get install -y git
            elif command -v yum &> /dev/null; then
              yum install -y git
            elif command -v apk &> /dev/null; then
              apk add --no-cache git
            else
              echo "ERROR: Cannot install git - unknown package manager"
              exit 1
            fi
          fi

          # Check if project directory exists, create if not
          if [ ! -d /root/fenix ]; then
            cd /root
            git clone https://github.com/${{ github.repository }}.git fenix
            cd fenix
          else
            cd /root/fenix
            git pull origin main
          fi

          # Copy .env.example to .env if .env doesn't exist
          if [ ! -f .env ]; then
            if [ -f .env.example ]; then
              cp .env.example .env
            else
              echo "WARNING: .env.example not found, creating minimal .env"
              touch .env
            fi
          fi

          # Update .env with secrets (only if secrets are set)
          if [ -n "${{ secrets.SAM_GOV_API_KEY }}" ]; then
            sed -i 's/SAM_GOV_API_KEY=.*/SAM_GOV_API_KEY=${{ secrets.SAM_GOV_API_KEY }}/' .env
          fi
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            sed -i 's/OPENAI_API_KEY=.*/OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}/' .env
          fi
          if [ -n "${{ secrets.CRAWL4AI_API_KEY }}" ]; then
            sed -i 's/CRAWL4AI_API_KEY=.*/CRAWL4AI_API_KEY=${{ secrets.CRAWL4AI_API_KEY }}/' .env
          fi
          if [ -n "${{ secrets.SHOVELS_AI_API_KEY }}" ]; then
            sed -i 's/SHOVELS_AI_API_KEY=.*/SHOVELS_AI_API_KEY=${{ secrets.SHOVELS_AI_API_KEY }}/' .env
          fi

          # E-mail configuration (only if secrets are set)
          if [ -n "${{ secrets.SMTP_SERVER }}" ]; then
            sed -i 's/SMTP_SERVER=.*/SMTP_SERVER=${{ secrets.SMTP_SERVER }}/' .env
          fi
          if [ -n "${{ secrets.SMTP_PORT }}" ]; then
            sed -i 's/SMTP_PORT=.*/SMTP_PORT=${{ secrets.SMTP_PORT }}/' .env
          fi
          if [ -n "${{ secrets.EMAIL_USERNAME }}" ]; then
            sed -i 's/EMAIL_USERNAME=.*/EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}/' .env
          fi
          if [ -n "${{ secrets.EMAIL_PASSWORD }}" ]; then
            sed -i 's/EMAIL_PASSWORD=.*/EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}/' .env
          fi
          if [ -n "${{ secrets.DEFAULT_NOTIFICATION_EMAIL }}" ]; then
            sed -i 's/DEFAULT_NOTIFICATION_EMAIL=.*/DEFAULT_NOTIFICATION_EMAIL=${{ secrets.DEFAULT_NOTIFICATION_EMAIL }}/' .env
          fi

          # Run deployment with modern docker compose
          echo "$(date): Starting FENIX deployment with monitoring..." >> /var/log/fenix-deploy.log

          # Stop services
          docker compose down || true

          # Create volumes if needed
          docker volume create fenix_postgres_data || true
          docker volume create fenix_redis_data || true

          # Build and start services (force rebuild without cache)
          docker compose build --no-cache
          docker compose up -d --force-recreate

          # Wait for database to be healthy
          echo "$(date): Waiting for database to be healthy..." >> /var/log/fenix-deploy.log
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker compose exec postgres pg_isready -U fenix > /dev/null 2>&1; then
              echo "$(date): Database is ready!" >> /var/log/fenix-deploy.log
              break
            fi
            sleep 2
            timeout=$((timeout-2))
          done

          # Check all services
          docker compose ps

          # Test monitoring system
          sleep 10
          curl -s http://localhost:8001/health || echo "Eagle service not responding"

          echo "$(date): Deployment completed with monitoring system!" >> /var/log/fenix-deploy.log

    - name: Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "$(date): GitHub Actions deployment successful" >> /var/log/fenix-deploy.log
          else
            echo "$(date): GitHub Actions deployment failed" >> /var/log/fenix-deploy.log
          fi
